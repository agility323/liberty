// client-gate proto
syntax = "proto3";

import "common.proto";
package lbtproto;

option cc_generic_services = true;
option py_generic_services = true;

message BindClientInfo {
	string caddr = 1;
	string saddr = 2;
}

message Filter {
	string attr = 1;
	string op = 2;
	int32 val = 3;
}

message FilterData {
	enum FilterDataType {
		SET = 0;
		UPDATE = 1;
		DELETE = 2;
	}
	FilterDataType type = 1;
	string id = 2;
	map<string, int32> data = 3;	// {attr: val}
}

message FilterMsg {
	string method = 1;
	bytes params = 2;
	repeated Filter filters = 3;
}

// service-gate rpc
service IServiceGate {
	rpc register_service(ServiceInfo) returns (Void);
	rpc bind_client(BindClientInfo) returns (Void);
	rpc unbind_client(BindClientInfo) returns (Void);
	rpc service_request(ServiceRequest) returns (Void);
	rpc service_reply(ServiceReply) returns (Void);
	rpc client_service_reply(ServiceReply) returns (Void);
	rpc create_entity(EntityData) returns (Void);
	rpc entity_msg(EntityMsg) returns (Void);
	rpc client_entity_msg(EntityMsg) returns (Void);
	rpc set_filter_data(FilterData) returns(Void);
	rpc filter_msg(FilterMsg) returns (Void);
}

// gate-service rpc
service IService {
	rpc register_reply(ServiceInfo) returns (Void);
	rpc client_disconnect(BindClientInfo) returns (Void);
	rpc service_request(ServiceRequest) returns (Void);
	rpc service_reply(ServiceReply) returns (Void);
	rpc client_service_request(ServiceRequest) returns (Void);
	rpc entity_msg(EntityMsg) returns (Void);
	rpc service_shutdown(Void) returns (Void);
}

