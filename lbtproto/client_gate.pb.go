// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client_gate.proto

package lbtproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("client_gate.proto", fileDescriptor_4d2708ccafc70b39) }

var fileDescriptor_4d2708ccafc70b39 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x91, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x1b, 0x05, 0x95, 0xd1, 0x6d, 0x31, 0x15, 0x95, 0x0a, 0x79, 0x84, 0x05, 0x2b, 0xa2,
	0x58, 0xf0, 0xd0, 0x2a, 0xd2, 0x83, 0x97, 0x16, 0xbc, 0x2e, 0x69, 0x1c, 0xd7, 0x85, 0x6d, 0xb2,
	0xdd, 0xc4, 0xc2, 0xde, 0x7c, 0x84, 0x3e, 0x85, 0x67, 0x1f, 0xc3, 0x63, 0x8f, 0x1e, 0xa5, 0x7d,
	0x11, 0xa1, 0xd9, 0xb2, 0xdb, 0x46, 0x6f, 0x1e, 0xbc, 0x65, 0xf8, 0xe7, 0x9b, 0xf9, 0xe7, 0x0f,
	0xec, 0x8b, 0x38, 0x42, 0x69, 0x82, 0x90, 0x1b, 0xf4, 0x93, 0x54, 0x19, 0x45, 0x77, 0xe2, 0x81,
	0x59, 0xbc, 0x1a, 0x7b, 0x42, 0x0d, 0x87, 0x4a, 0xfa, 0x79, 0x15, 0x63, 0xc8, 0x45, 0x66, 0xab,
	0xe6, 0xfb, 0x06, 0xec, 0x76, 0x3b, 0x0b, 0xf8, 0x8e, 0x1b, 0xa4, 0x2d, 0xf0, 0x84, 0x92, 0x12,
	0x85, 0xe9, 0x63, 0x3a, 0xc6, 0x94, 0x36, 0xfc, 0xe5, 0x1c, 0xbf, 0x53, 0x16, 0x7a, 0x38, 0x6a,
	0x54, 0x0b, 0xed, 0x41, 0x45, 0x8f, 0xf4, 0x12, 0x3c, 0x94, 0x26, 0x32, 0xd9, 0x3d, 0x6a, 0xcd,
	0x43, 0xa4, 0x47, 0x45, 0xc3, 0x6d, 0x59, 0x70, 0xc8, 0x2b, 0xa8, 0x8a, 0x67, 0x2e, 0x25, 0xc6,
	0x4b, 0xf4, 0xb8, 0xb4, 0x77, 0x45, 0x71, 0xd8, 0x16, 0xd4, 0x34, 0xa6, 0xe3, 0x48, 0x60, 0x90,
	0xe2, 0xe8, 0x05, 0xb5, 0x29, 0xc3, 0x7d, 0x2b, 0xf5, 0xac, 0xe2, 0xc0, 0xa7, 0x00, 0xd6, 0x72,
	0x30, 0xd4, 0x21, 0xad, 0x3b, 0x7e, 0x75, 0xb8, 0x8e, 0x34, 0xdf, 0x36, 0x61, 0x3b, 0x8f, 0x8c,
	0x5e, 0x43, 0x2d, 0x8f, 0xab, 0x87, 0x3a, 0x51, 0x52, 0x23, 0x3d, 0xf9, 0x35, 0x30, 0x9d, 0x38,
	0xeb, 0xdb, 0x50, 0x17, 0x29, 0x72, 0x83, 0xf9, 0x8d, 0x76, 0xeb, 0xca, 0x8c, 0xb2, 0xd0, 0x95,
	0x4f, 0xea, 0x9f, 0xa4, 0x7e, 0x01, 0x5e, 0x91, 0x7a, 0x12, 0x67, 0xf4, 0xf0, 0x87, 0xcc, 0x93,
	0x38, 0x73, 0xc0, 0x73, 0xf0, 0xec, 0xc9, 0x81, 0x75, 0x4d, 0x0f, 0xd6, 0xed, 0xde, 0x70, 0xc3,
	0xff, 0xe0, 0xa3, 0xda, 0xec, 0x63, 0xc6, 0xc8, 0x74, 0xc6, 0xc8, 0xd7, 0x8c, 0x91, 0xc9, 0x9c,
	0x55, 0xa6, 0x73, 0x56, 0xf9, 0x9c, 0xb3, 0xca, 0x2b, 0x21, 0x13, 0x42, 0x06, 0x5b, 0x8b, 0xde,
	0xb3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xa0, 0xb2, 0x2d, 0x3d, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IClientGateClient is the client API for IClientGate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IClientGateClient interface {
	// legacy methods
	ConnectServer(ctx context.Context, in *ConnectServerReq, opts ...grpc.CallOption) (*Void, error)
	EntityMessage(ctx context.Context, in *EntityMessage, opts ...grpc.CallOption) (*Void, error)
	ChannelMessage(ctx context.Context, in *ChannelMessage, opts ...grpc.CallOption) (*Void, error)
	ServiceRequest(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Void, error)
	EntityMsg(ctx context.Context, in *EntityMsg, opts ...grpc.CallOption) (*Void, error)
}

type iClientGateClient struct {
	cc *grpc.ClientConn
}

func NewIClientGateClient(cc *grpc.ClientConn) IClientGateClient {
	return &iClientGateClient{cc}
}

func (c *iClientGateClient) ConnectServer(ctx context.Context, in *ConnectServerReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IClientGate/connectServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iClientGateClient) EntityMessage(ctx context.Context, in *EntityMessage, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IClientGate/entityMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iClientGateClient) ChannelMessage(ctx context.Context, in *ChannelMessage, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IClientGate/channelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iClientGateClient) ServiceRequest(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IClientGate/service_request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iClientGateClient) EntityMsg(ctx context.Context, in *EntityMsg, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IClientGate/entity_msg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IClientGateServer is the server API for IClientGate service.
type IClientGateServer interface {
	// legacy methods
	ConnectServer(context.Context, *ConnectServerReq) (*Void, error)
	EntityMessage(context.Context, *EntityMessage) (*Void, error)
	ChannelMessage(context.Context, *ChannelMessage) (*Void, error)
	ServiceRequest(context.Context, *ServiceRequest) (*Void, error)
	EntityMsg(context.Context, *EntityMsg) (*Void, error)
}

// UnimplementedIClientGateServer can be embedded to have forward compatible implementations.
type UnimplementedIClientGateServer struct {
}

func (*UnimplementedIClientGateServer) ConnectServer(ctx context.Context, req *ConnectServerReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectServer not implemented")
}
func (*UnimplementedIClientGateServer) EntityMessage(ctx context.Context, req *EntityMessage) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityMessage not implemented")
}
func (*UnimplementedIClientGateServer) ChannelMessage(ctx context.Context, req *ChannelMessage) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessage not implemented")
}
func (*UnimplementedIClientGateServer) ServiceRequest(ctx context.Context, req *ServiceRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceRequest not implemented")
}
func (*UnimplementedIClientGateServer) EntityMsg(ctx context.Context, req *EntityMsg) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityMsg not implemented")
}

func RegisterIClientGateServer(s *grpc.Server, srv IClientGateServer) {
	s.RegisterService(&_IClientGate_serviceDesc, srv)
}

func _IClientGate_ConnectServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IClientGateServer).ConnectServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IClientGate/ConnectServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IClientGateServer).ConnectServer(ctx, req.(*ConnectServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IClientGate_EntityMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IClientGateServer).EntityMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IClientGate/EntityMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IClientGateServer).EntityMessage(ctx, req.(*EntityMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _IClientGate_ChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IClientGateServer).ChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IClientGate/ChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IClientGateServer).ChannelMessage(ctx, req.(*ChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _IClientGate_ServiceRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IClientGateServer).ServiceRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IClientGate/ServiceRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IClientGateServer).ServiceRequest(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IClientGate_EntityMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IClientGateServer).EntityMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IClientGate/EntityMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IClientGateServer).EntityMsg(ctx, req.(*EntityMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _IClientGate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lbtproto.IClientGate",
	HandlerType: (*IClientGateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "connectServer",
			Handler:    _IClientGate_ConnectServer_Handler,
		},
		{
			MethodName: "entityMessage",
			Handler:    _IClientGate_EntityMessage_Handler,
		},
		{
			MethodName: "channelMessage",
			Handler:    _IClientGate_ChannelMessage_Handler,
		},
		{
			MethodName: "service_request",
			Handler:    _IClientGate_ServiceRequest_Handler,
		},
		{
			MethodName: "entity_msg",
			Handler:    _IClientGate_EntityMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_gate.proto",
}

// IClientClient is the client API for IClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IClientClient interface {
	// legacy methods
	ConnectResponse(ctx context.Context, in *ConnectServerResp, opts ...grpc.CallOption) (*Void, error)
	CreateChannelEntity(ctx context.Context, in *ChannelEntityInfo, opts ...grpc.CallOption) (*Void, error)
	EntityMessage(ctx context.Context, in *EntityMessage, opts ...grpc.CallOption) (*Void, error)
	ChannelMessage(ctx context.Context, in *ChannelMessage, opts ...grpc.CallOption) (*Void, error)
	ServiceReply(ctx context.Context, in *ServiceReply, opts ...grpc.CallOption) (*Void, error)
	CreateEntity(ctx context.Context, in *EntityData, opts ...grpc.CallOption) (*Void, error)
	EntityMsg(ctx context.Context, in *EntityMsg, opts ...grpc.CallOption) (*Void, error)
}

type iClientClient struct {
	cc *grpc.ClientConn
}

func NewIClientClient(cc *grpc.ClientConn) IClientClient {
	return &iClientClient{cc}
}

func (c *iClientClient) ConnectResponse(ctx context.Context, in *ConnectServerResp, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IClient/connectResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iClientClient) CreateChannelEntity(ctx context.Context, in *ChannelEntityInfo, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IClient/createChannelEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iClientClient) EntityMessage(ctx context.Context, in *EntityMessage, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IClient/entityMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iClientClient) ChannelMessage(ctx context.Context, in *ChannelMessage, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IClient/channelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iClientClient) ServiceReply(ctx context.Context, in *ServiceReply, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IClient/service_reply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iClientClient) CreateEntity(ctx context.Context, in *EntityData, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IClient/create_entity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iClientClient) EntityMsg(ctx context.Context, in *EntityMsg, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IClient/entity_msg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IClientServer is the server API for IClient service.
type IClientServer interface {
	// legacy methods
	ConnectResponse(context.Context, *ConnectServerResp) (*Void, error)
	CreateChannelEntity(context.Context, *ChannelEntityInfo) (*Void, error)
	EntityMessage(context.Context, *EntityMessage) (*Void, error)
	ChannelMessage(context.Context, *ChannelMessage) (*Void, error)
	ServiceReply(context.Context, *ServiceReply) (*Void, error)
	CreateEntity(context.Context, *EntityData) (*Void, error)
	EntityMsg(context.Context, *EntityMsg) (*Void, error)
}

// UnimplementedIClientServer can be embedded to have forward compatible implementations.
type UnimplementedIClientServer struct {
}

func (*UnimplementedIClientServer) ConnectResponse(ctx context.Context, req *ConnectServerResp) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectResponse not implemented")
}
func (*UnimplementedIClientServer) CreateChannelEntity(ctx context.Context, req *ChannelEntityInfo) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannelEntity not implemented")
}
func (*UnimplementedIClientServer) EntityMessage(ctx context.Context, req *EntityMessage) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityMessage not implemented")
}
func (*UnimplementedIClientServer) ChannelMessage(ctx context.Context, req *ChannelMessage) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelMessage not implemented")
}
func (*UnimplementedIClientServer) ServiceReply(ctx context.Context, req *ServiceReply) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceReply not implemented")
}
func (*UnimplementedIClientServer) CreateEntity(ctx context.Context, req *EntityData) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (*UnimplementedIClientServer) EntityMsg(ctx context.Context, req *EntityMsg) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityMsg not implemented")
}

func RegisterIClientServer(s *grpc.Server, srv IClientServer) {
	s.RegisterService(&_IClient_serviceDesc, srv)
}

func _IClient_ConnectResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectServerResp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IClientServer).ConnectResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IClient/ConnectResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IClientServer).ConnectResponse(ctx, req.(*ConnectServerResp))
	}
	return interceptor(ctx, in, info, handler)
}

func _IClient_CreateChannelEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelEntityInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IClientServer).CreateChannelEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IClient/CreateChannelEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IClientServer).CreateChannelEntity(ctx, req.(*ChannelEntityInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IClient_EntityMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IClientServer).EntityMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IClient/EntityMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IClientServer).EntityMessage(ctx, req.(*EntityMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _IClient_ChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IClientServer).ChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IClient/ChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IClientServer).ChannelMessage(ctx, req.(*ChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _IClient_ServiceReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IClientServer).ServiceReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IClient/ServiceReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IClientServer).ServiceReply(ctx, req.(*ServiceReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _IClient_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IClientServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IClient/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IClientServer).CreateEntity(ctx, req.(*EntityData))
	}
	return interceptor(ctx, in, info, handler)
}

func _IClient_EntityMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IClientServer).EntityMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IClient/EntityMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IClientServer).EntityMsg(ctx, req.(*EntityMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _IClient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lbtproto.IClient",
	HandlerType: (*IClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "connectResponse",
			Handler:    _IClient_ConnectResponse_Handler,
		},
		{
			MethodName: "createChannelEntity",
			Handler:    _IClient_CreateChannelEntity_Handler,
		},
		{
			MethodName: "entityMessage",
			Handler:    _IClient_EntityMessage_Handler,
		},
		{
			MethodName: "channelMessage",
			Handler:    _IClient_ChannelMessage_Handler,
		},
		{
			MethodName: "service_reply",
			Handler:    _IClient_ServiceReply_Handler,
		},
		{
			MethodName: "create_entity",
			Handler:    _IClient_CreateEntity_Handler,
		},
		{
			MethodName: "entity_msg",
			Handler:    _IClient_EntityMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_gate.proto",
}
