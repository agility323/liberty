package lbtproto

import (
	"testing"
	"fmt"
	"reflect"

	"github.com/agility323/liberty/lbtutil"
	"github.com/vmihailenco/msgpack"
)

var cases = [][]byte{
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,59,145,41,102,58,108,18,81,229,174,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,59,159,216,89,25,48,45,178,205,185,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,59,145,41,102,58,108,18,81,229,174,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,59,159,216,89,25,48,45,178,205,185,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,2,169,99,104,97,110,110,101,108,73,100,172,100,37,59,145,41,102,58,108,18,81,229,174,26,1,144},
[]byte{62,0,0,0,5,0,10,55,131,169,99,104,97,110,110,101,108,73,100,172,100,37,59,206,41,102,58,108,18,81,229,177,167,109,115,103,84,121,112,101,1,171,99,104,97,110,110,101,108,78,97,109,101,169,67,83,67,104,97,110,110,101,108,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,2,169,99,104,97,110,110,101,108,73,100,172,100,37,59,159,216,89,25,48,45,178,205,185,26,1,144},
[]byte{62,0,0,0,5,0,10,55,131,169,99,104,97,110,110,101,108,73,100,172,100,37,59,220,216,89,25,48,45,178,206,132,167,109,115,103,84,121,112,101,1,171,99,104,97,110,110,101,108,78,97,109,101,169,67,83,67,104,97,110,110,101,108,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,59,206,41,102,58,108,18,81,229,177,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,59,220,216,89,25,48,45,178,206,132,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,59,206,41,102,58,108,18,81,229,177,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,59,220,216,89,25,48,45,178,206,132,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,2,169,99,104,97,110,110,101,108,73,100,172,100,37,59,206,41,102,58,108,18,81,229,177,26,1,144},
[]byte{62,0,0,0,5,0,10,55,131,169,99,104,97,110,110,101,108,73,100,172,100,37,60,11,41,102,58,108,18,81,229,180,167,109,115,103,84,121,112,101,1,171,99,104,97,110,110,101,108,78,97,109,101,169,67,83,67,104,97,110,110,101,108,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,2,169,99,104,97,110,110,101,108,73,100,172,100,37,59,220,216,89,25,48,45,178,206,132,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,60,11,41,102,58,108,18,81,229,180,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,60,11,41,102,58,108,18,81,229,180,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,2,169,99,104,97,110,110,101,108,73,100,172,100,37,60,11,41,102,58,108,18,81,229,180,26,1,144},
[]byte{62,0,0,0,5,0,10,55,131,169,99,104,97,110,110,101,108,73,100,172,100,37,60,72,41,102,58,108,18,81,229,183,167,109,115,103,84,121,112,101,1,171,99,104,97,110,110,101,108,78,97,109,101,169,67,83,67,104,97,110,110,101,108,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,60,72,41,102,58,108,18,81,229,183,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,60,72,41,102,58,108,18,81,229,183,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,2,169,99,104,97,110,110,101,108,73,100,172,100,37,60,72,41,102,58,108,18,81,229,183,26,1,144},
[]byte{62,0,0,0,5,0,10,55,131,169,99,104,97,110,110,101,108,73,100,172,100,37,60,133,41,102,58,108,18,81,229,186,167,109,115,103,84,121,112,101,1,171,99,104,97,110,110,101,108,78,97,109,101,169,67,83,67,104,97,110,110,101,108,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,60,133,41,102,58,108,18,81,229,186,26,1,144},
[]byte{62,0,0,0,5,0,10,55,131,169,99,104,97,110,110,101,108,73,100,172,100,37,60,162,216,89,25,48,45,178,202,251,167,109,115,103,84,121,112,101,1,171,99,104,97,110,110,101,108,78,97,109,101,169,67,83,67,104,97,110,110,101,108,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,60,133,41,102,58,108,18,81,229,186,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,60,162,216,89,25,48,45,178,202,251,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,2,169,99,104,97,110,110,101,108,73,100,172,100,37,60,133,41,102,58,108,18,81,229,186,26,1,144},
[]byte{62,0,0,0,5,0,10,55,131,169,99,104,97,110,110,101,108,73,100,172,100,37,60,194,41,102,58,108,18,81,229,189,167,109,115,103,84,121,112,101,1,171,99,104,97,110,110,101,108,78,97,109,101,169,67,83,67,104,97,110,110,101,108,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,60,162,216,89,25,48,45,178,202,251,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,60,194,41,102,58,108,18,81,229,189,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,2,169,99,104,97,110,110,101,108,73,100,172,100,37,60,162,216,89,25,48,45,178,202,251,26,1,144},
[]byte{62,0,0,0,5,0,10,55,131,169,99,104,97,110,110,101,108,73,100,172,100,37,60,223,216,89,25,48,45,178,203,146,167,109,115,103,84,121,112,101,1,171,99,104,97,110,110,101,108,78,97,109,101,169,67,83,67,104,97,110,110,101,108,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,60,194,41,102,58,108,18,81,229,189,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,60,223,216,89,25,48,45,178,203,146,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,2,169,99,104,97,110,110,101,108,73,100,172,100,37,60,194,41,102,58,108,18,81,229,189,26,1,144},
[]byte{62,0,0,0,5,0,10,55,131,169,99,104,97,110,110,101,108,73,100,172,100,37,60,255,41,102,58,108,18,81,229,192,167,109,115,103,84,121,112,101,1,171,99,104,97,110,110,101,108,78,97,109,101,169,67,83,67,104,97,110,110,101,108,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,60,223,216,89,25,48,45,178,203,146,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,2,169,99,104,97,110,110,101,108,73,100,172,100,37,60,223,216,89,25,48,45,178,203,146,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,60,255,41,102,58,108,18,81,229,192,26,1,144},
[]byte{40,0,0,0,5,0,10,33,130,167,109,115,103,84,121,112,101,3,169,99,104,97,110,110,101,108,73,100,172,100,37,60,255,41,102,58,108,18,81,229,192,26,1,144},
}

func TestProto(t *testing.T) {
	buf := []byte{88, 0, 0, 0, 235, 3, 10, 15, 49, 50, 55, 46, 48, 46, 48, 46, 49, 58, 51, 57, 53, 53, 52, 18, 12, 97, 204, 55, 211, 225, 56, 35, 125, 196, 184, 130, 79, 26, 6, 65, 118, 97, 116, 97, 114, 34, 45, 130, 162, 69, 67, 130, 162, 105, 100, 172, 97, 204, 55, 211, 225, 56, 35, 125, 196, 184, 130, 79, 163, 116, 121, 112, 166, 65, 118, 97, 116, 97, 114, 164, 110, 97, 109, 101, 167, 116, 101, 115, 116, 49, 50, 51}
	msg := &EntityData{}
	if err := DecodeMessage(buf, msg); err != nil {
		fmt.Printf("EntityData decode fail: [%s]\n", err.Error())
	}
	fmt.Printf("EntityData: %v\n", *msg)
}

func TestChannelMessage(t *testing.T) {
	msg := &ChannelMessage{}
	var err error
	for idx, b := range cases {
		err = DecodeMessage(b, msg)
		if err != nil {
			fmt.Printf("chan_msg-%02d: %v %v\n", idx, "----------ERROR_PROTOBUF----------", err)
			continue
		}
		var m map[string]interface{}
		err = msgpack.Unmarshal(msg.ChanMsg, &m)
		if err != nil {
			fmt.Printf("chan_msg-%02d: %v %v\n", idx, "----------ERROR_MSGPACK----------", err)
			continue
		}
		itf, ok := m["channelId"]
		if ok {
			s, _ := itf.(string)
			//oid := lbtutil.ObjectID(*(*[12]byte)([]byte(s)))
			oid := lbtutil.NewObjectID()
			copy(oid[:], s)
			m["channelId"] = oid.String()
		}
		itf, ok = m["msgType"]
		if ok {
			var n int
			v := reflect.ValueOf(itf)
			if v.CanConvert(reflect.TypeOf(n)) {
				n = v.Convert(reflect.TypeOf(n)).Interface().(int)
			}
			fmt.Printf("chan msg mt: %d %v ----- %v\n", n, ok, reflect.TypeOf(itf))
		}
		fmt.Printf("chan_msg-%02d: %v %v\n", idx, m, err)
	}
}
