// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: legacy.proto

package lbtproto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConnectServerReq_ReqType int32

const (
	ConnectServerReq_NewConnection ConnectServerReq_ReqType = 0
	ConnectServerReq_ReConnection  ConnectServerReq_ReqType = 1
	ConnectServerReq_BindSoul      ConnectServerReq_ReqType = 2
	ConnectServerReq_BindAvatar    ConnectServerReq_ReqType = 3
	ConnectServerReq_BindAccount   ConnectServerReq_ReqType = 4
)

var ConnectServerReq_ReqType_name = map[int32]string{
	0: "NewConnection",
	1: "ReConnection",
	2: "BindSoul",
	3: "BindAvatar",
	4: "BindAccount",
}

var ConnectServerReq_ReqType_value = map[string]int32{
	"NewConnection": 0,
	"ReConnection":  1,
	"BindSoul":      2,
	"BindAvatar":    3,
	"BindAccount":   4,
}

func (x ConnectServerReq_ReqType) String() string {
	return proto.EnumName(ConnectServerReq_ReqType_name, int32(x))
}

func (ConnectServerReq_ReqType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4b5c555c498591f0, []int{3, 0}
}

type ConnectServerResp_RespType int32

const (
	ConnectServerResp_Busy             ConnectServerResp_RespType = 0
	ConnectServerResp_Connected        ConnectServerResp_RespType = 1
	ConnectServerResp_ConnectRefused   ConnectServerResp_RespType = 2
	ConnectServerResp_Reconnected      ConnectServerResp_RespType = 3
	ConnectServerResp_ReconnectRefused ConnectServerResp_RespType = 4
	ConnectServerResp_Forbidden        ConnectServerResp_RespType = 5
	ConnectServerResp_MaxConnections   ConnectServerResp_RespType = 6
)

var ConnectServerResp_RespType_name = map[int32]string{
	0: "Busy",
	1: "Connected",
	2: "ConnectRefused",
	3: "Reconnected",
	4: "ReconnectRefused",
	5: "Forbidden",
	6: "MaxConnections",
}

var ConnectServerResp_RespType_value = map[string]int32{
	"Busy":             0,
	"Connected":        1,
	"ConnectRefused":   2,
	"Reconnected":      3,
	"ReconnectRefused": 4,
	"Forbidden":        5,
	"MaxConnections":   6,
}

func (x ConnectServerResp_RespType) String() string {
	return proto.EnumName(ConnectServerResp_RespType_name, int32(x))
}

func (ConnectServerResp_RespType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4b5c555c498591f0, []int{4, 0}
}

type EncryptToken struct {
	Token int64 `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *EncryptToken) Reset()         { *m = EncryptToken{} }
func (m *EncryptToken) String() string { return proto.CompactTextString(m) }
func (*EncryptToken) ProtoMessage()    {}
func (*EncryptToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b5c555c498591f0, []int{0}
}
func (m *EncryptToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncryptToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncryptToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptToken.Merge(m, src)
}
func (m *EncryptToken) XXX_Size() int {
	return m.Size()
}
func (m *EncryptToken) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptToken.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptToken proto.InternalMessageInfo

func (m *EncryptToken) GetToken() int64 {
	if m != nil {
		return m.Token
	}
	return 0
}

type EncryptKey struct {
	HeadPadding []byte `protobuf:"bytes,1,opt,name=headPadding,proto3" json:"headPadding,omitempty"`
	Key         []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Token       int64  `protobuf:"varint,3,opt,name=token,proto3" json:"token,omitempty"`
	TailPadding []byte `protobuf:"bytes,4,opt,name=tailPadding,proto3" json:"tailPadding,omitempty"`
}

func (m *EncryptKey) Reset()         { *m = EncryptKey{} }
func (m *EncryptKey) String() string { return proto.CompactTextString(m) }
func (*EncryptKey) ProtoMessage()    {}
func (*EncryptKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b5c555c498591f0, []int{1}
}
func (m *EncryptKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncryptKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncryptKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptKey.Merge(m, src)
}
func (m *EncryptKey) XXX_Size() int {
	return m.Size()
}
func (m *EncryptKey) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptKey.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptKey proto.InternalMessageInfo

func (m *EncryptKey) GetHeadPadding() []byte {
	if m != nil {
		return m.HeadPadding
	}
	return nil
}

func (m *EncryptKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *EncryptKey) GetToken() int64 {
	if m != nil {
		return m.Token
	}
	return 0
}

func (m *EncryptKey) GetTailPadding() []byte {
	if m != nil {
		return m.TailPadding
	}
	return nil
}

type EncryptKeyString struct {
	KeyString []byte `protobuf:"bytes,1,opt,name=keyString,proto3" json:"keyString,omitempty"`
}

func (m *EncryptKeyString) Reset()         { *m = EncryptKeyString{} }
func (m *EncryptKeyString) String() string { return proto.CompactTextString(m) }
func (*EncryptKeyString) ProtoMessage()    {}
func (*EncryptKeyString) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b5c555c498591f0, []int{2}
}
func (m *EncryptKeyString) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptKeyString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncryptKeyString.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncryptKeyString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptKeyString.Merge(m, src)
}
func (m *EncryptKeyString) XXX_Size() int {
	return m.Size()
}
func (m *EncryptKeyString) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptKeyString.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptKeyString proto.InternalMessageInfo

func (m *EncryptKeyString) GetKeyString() []byte {
	if m != nil {
		return m.KeyString
	}
	return nil
}

type ConnectServerReq struct {
	Type       ConnectServerReq_ReqType `protobuf:"varint,1,opt,name=type,proto3,enum=lbtproto.ConnectServerReq_ReqType" json:"type,omitempty"`
	DeviceId   []byte                   `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	ClientInfo []byte                   `protobuf:"bytes,3,opt,name=clientInfo,proto3" json:"clientInfo,omitempty"`
	Auth       []byte                   `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	EntityInfo []byte                   `protobuf:"bytes,5,opt,name=entityInfo,proto3" json:"entityInfo,omitempty"`
}

func (m *ConnectServerReq) Reset()         { *m = ConnectServerReq{} }
func (m *ConnectServerReq) String() string { return proto.CompactTextString(m) }
func (*ConnectServerReq) ProtoMessage()    {}
func (*ConnectServerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b5c555c498591f0, []int{3}
}
func (m *ConnectServerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectServerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectServerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectServerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectServerReq.Merge(m, src)
}
func (m *ConnectServerReq) XXX_Size() int {
	return m.Size()
}
func (m *ConnectServerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectServerReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectServerReq proto.InternalMessageInfo

func (m *ConnectServerReq) GetType() ConnectServerReq_ReqType {
	if m != nil {
		return m.Type
	}
	return ConnectServerReq_NewConnection
}

func (m *ConnectServerReq) GetDeviceId() []byte {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *ConnectServerReq) GetClientInfo() []byte {
	if m != nil {
		return m.ClientInfo
	}
	return nil
}

func (m *ConnectServerReq) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *ConnectServerReq) GetEntityInfo() []byte {
	if m != nil {
		return m.EntityInfo
	}
	return nil
}

type ConnectServerResp struct {
	Type      ConnectServerResp_RespType `protobuf:"varint,1,opt,name=type,proto3,enum=lbtproto.ConnectServerResp_RespType" json:"type,omitempty"`
	SessionId []byte                     `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (m *ConnectServerResp) Reset()         { *m = ConnectServerResp{} }
func (m *ConnectServerResp) String() string { return proto.CompactTextString(m) }
func (*ConnectServerResp) ProtoMessage()    {}
func (*ConnectServerResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b5c555c498591f0, []int{4}
}
func (m *ConnectServerResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectServerResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectServerResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectServerResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectServerResp.Merge(m, src)
}
func (m *ConnectServerResp) XXX_Size() int {
	return m.Size()
}
func (m *ConnectServerResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectServerResp.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectServerResp proto.InternalMessageInfo

func (m *ConnectServerResp) GetType() ConnectServerResp_RespType {
	if m != nil {
		return m.Type
	}
	return ConnectServerResp_Busy
}

func (m *ConnectServerResp) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

type ChannelEntityInfo struct {
	Type      []byte `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Info      []byte `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	EntityId  []byte `protobuf:"bytes,3,opt,name=entityId,proto3" json:"entityId,omitempty"`
	SessionId []byte `protobuf:"bytes,4,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (m *ChannelEntityInfo) Reset()         { *m = ChannelEntityInfo{} }
func (m *ChannelEntityInfo) String() string { return proto.CompactTextString(m) }
func (*ChannelEntityInfo) ProtoMessage()    {}
func (*ChannelEntityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b5c555c498591f0, []int{5}
}
func (m *ChannelEntityInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelEntityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelEntityInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelEntityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelEntityInfo.Merge(m, src)
}
func (m *ChannelEntityInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChannelEntityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelEntityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelEntityInfo proto.InternalMessageInfo

func (m *ChannelEntityInfo) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ChannelEntityInfo) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ChannelEntityInfo) GetEntityId() []byte {
	if m != nil {
		return m.EntityId
	}
	return nil
}

func (m *ChannelEntityInfo) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

type EntityMessage struct {
	EntityId   []byte `protobuf:"bytes,1,opt,name=entityId,proto3" json:"entityId,omitempty"`
	MethodName []byte `protobuf:"bytes,2,opt,name=methodName,proto3" json:"methodName,omitempty"`
	Index      int32  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Parameters []byte `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	SessionId  []byte `protobuf:"bytes,5,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Context    []byte `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *EntityMessage) Reset()         { *m = EntityMessage{} }
func (m *EntityMessage) String() string { return proto.CompactTextString(m) }
func (*EntityMessage) ProtoMessage()    {}
func (*EntityMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b5c555c498591f0, []int{6}
}
func (m *EntityMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntityMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntityMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntityMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityMessage.Merge(m, src)
}
func (m *EntityMessage) XXX_Size() int {
	return m.Size()
}
func (m *EntityMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EntityMessage proto.InternalMessageInfo

func (m *EntityMessage) GetEntityId() []byte {
	if m != nil {
		return m.EntityId
	}
	return nil
}

func (m *EntityMessage) GetMethodName() []byte {
	if m != nil {
		return m.MethodName
	}
	return nil
}

func (m *EntityMessage) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *EntityMessage) GetParameters() []byte {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *EntityMessage) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *EntityMessage) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

type ChannelMessage struct {
	ChanMsg   []byte `protobuf:"bytes,1,opt,name=chanMsg,proto3" json:"chanMsg,omitempty"`
	SessionId []byte `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Context   []byte `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *ChannelMessage) Reset()         { *m = ChannelMessage{} }
func (m *ChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ChannelMessage) ProtoMessage()    {}
func (*ChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b5c555c498591f0, []int{7}
}
func (m *ChannelMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelMessage.Merge(m, src)
}
func (m *ChannelMessage) XXX_Size() int {
	return m.Size()
}
func (m *ChannelMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelMessage proto.InternalMessageInfo

func (m *ChannelMessage) GetChanMsg() []byte {
	if m != nil {
		return m.ChanMsg
	}
	return nil
}

func (m *ChannelMessage) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *ChannelMessage) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

func init() {
	proto.RegisterEnum("lbtproto.ConnectServerReq_ReqType", ConnectServerReq_ReqType_name, ConnectServerReq_ReqType_value)
	proto.RegisterEnum("lbtproto.ConnectServerResp_RespType", ConnectServerResp_RespType_name, ConnectServerResp_RespType_value)
	proto.RegisterType((*EncryptToken)(nil), "lbtproto.EncryptToken")
	proto.RegisterType((*EncryptKey)(nil), "lbtproto.EncryptKey")
	proto.RegisterType((*EncryptKeyString)(nil), "lbtproto.EncryptKeyString")
	proto.RegisterType((*ConnectServerReq)(nil), "lbtproto.ConnectServerReq")
	proto.RegisterType((*ConnectServerResp)(nil), "lbtproto.ConnectServerResp")
	proto.RegisterType((*ChannelEntityInfo)(nil), "lbtproto.ChannelEntityInfo")
	proto.RegisterType((*EntityMessage)(nil), "lbtproto.EntityMessage")
	proto.RegisterType((*ChannelMessage)(nil), "lbtproto.ChannelMessage")
}

func init() { proto.RegisterFile("legacy.proto", fileDescriptor_4b5c555c498591f0) }

var fileDescriptor_4b5c555c498591f0 = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcf, 0x4e, 0xdb, 0x4e,
	0x10, 0xce, 0x26, 0x0e, 0x84, 0xc1, 0xe4, 0xb7, 0xac, 0x38, 0x44, 0x3f, 0x21, 0x0b, 0x59, 0x1c,
	0x7a, 0x8a, 0xaa, 0x56, 0xaa, 0x7a, 0x2d, 0x88, 0x4a, 0xa8, 0x02, 0x55, 0x86, 0x6b, 0x0f, 0x1b,
	0xef, 0x40, 0x2c, 0xc2, 0xae, 0xf1, 0x6e, 0x68, 0x7c, 0x6b, 0xdf, 0x80, 0x6b, 0x1f, 0xa5, 0x6f,
	0xd0, 0x23, 0xc7, 0x1e, 0x2b, 0x78, 0x80, 0xbe, 0x42, 0xb5, 0x9b, 0xf5, 0x9f, 0x44, 0x6a, 0x2f,
	0xd6, 0x7c, 0x9f, 0x67, 0xbe, 0x99, 0x6f, 0xc6, 0x86, 0x70, 0x86, 0xd7, 0x3c, 0x2d, 0xc7, 0x79,
	0xa1, 0x8c, 0x62, 0x83, 0xd9, 0xc4, 0xb8, 0x28, 0x3e, 0x84, 0xf0, 0x44, 0xa6, 0x45, 0x99, 0x9b,
	0x4b, 0x75, 0x83, 0x92, 0xed, 0x41, 0xdf, 0xd8, 0x60, 0x44, 0x0e, 0xc8, 0x8b, 0x5e, 0xb2, 0x04,
	0xf1, 0x02, 0xc0, 0x67, 0x7d, 0xc0, 0x92, 0x1d, 0xc0, 0xf6, 0x14, 0xb9, 0xf8, 0xc8, 0x85, 0xc8,
	0xe4, 0xb5, 0xcb, 0x0c, 0x93, 0x36, 0xc5, 0x28, 0xf4, 0x6e, 0xb0, 0x1c, 0x75, 0xdd, 0x1b, 0x1b,
	0x36, 0xba, 0xbd, 0x96, 0xae, 0x55, 0x32, 0x3c, 0x9b, 0x55, 0x4a, 0xc1, 0x52, 0xa9, 0x45, 0xc5,
	0x2f, 0x81, 0x36, 0x9d, 0x2f, 0x4c, 0x61, 0xd5, 0xf7, 0x61, 0xeb, 0xa6, 0x02, 0xbe, 0x7b, 0x43,
	0xc4, 0xdf, 0xba, 0x40, 0x8f, 0x95, 0x94, 0x98, 0x9a, 0x0b, 0x2c, 0xee, 0xb1, 0x48, 0xf0, 0x8e,
	0xbd, 0x81, 0xc0, 0x94, 0x39, 0xba, 0xec, 0xe1, 0xab, 0x78, 0x5c, 0xf9, 0x1f, 0xaf, 0x67, 0x8e,
	0x13, 0xbc, 0xbb, 0x2c, 0x73, 0x4c, 0x5c, 0x3e, 0xfb, 0x1f, 0x06, 0x02, 0xef, 0xb3, 0x14, 0x4f,
	0x85, 0x77, 0x53, 0x63, 0x16, 0x01, 0xa4, 0xb3, 0x0c, 0xa5, 0x39, 0x95, 0x57, 0xca, 0xf9, 0x0a,
	0x93, 0x16, 0xc3, 0x18, 0x04, 0x7c, 0x6e, 0xa6, 0xde, 0x95, 0x8b, 0x6d, 0x0d, 0x4a, 0x93, 0x99,
	0xd2, 0xd5, 0xf4, 0x97, 0x35, 0x0d, 0x13, 0x7f, 0x82, 0x4d, 0x3f, 0x00, 0xdb, 0x85, 0x9d, 0x73,
	0xfc, 0xec, 0xe7, 0xcb, 0x94, 0xa4, 0x1d, 0x46, 0x21, 0x4c, 0xb0, 0xc5, 0x10, 0x16, 0xc2, 0xe0,
	0x28, 0x93, 0xe2, 0x42, 0xcd, 0x67, 0xb4, 0xcb, 0x86, 0x00, 0x16, 0xbd, 0xbb, 0xe7, 0x86, 0x17,
	0xb4, 0xc7, 0xfe, 0x83, 0x6d, 0x87, 0xd3, 0x54, 0xcd, 0xa5, 0xa1, 0x41, 0xfc, 0x9b, 0xc0, 0xee,
	0x9a, 0x63, 0x9d, 0xb3, 0xb7, 0x2b, 0xcb, 0x39, 0xfc, 0xeb, 0x72, 0x74, 0x3e, 0xb6, 0x8f, 0xd6,
	0x7a, 0xf6, 0x61, 0x4b, 0xa3, 0xd6, 0x99, 0x92, 0xf5, 0x7e, 0x1a, 0x22, 0xfe, 0x4a, 0x60, 0x50,
	0x15, 0xb0, 0x01, 0x04, 0x47, 0x73, 0x5d, 0xd2, 0x0e, 0xdb, 0x81, 0x2d, 0x2f, 0x8c, 0x82, 0x12,
	0xc6, 0x60, 0xe8, 0x61, 0x82, 0x57, 0x73, 0x8d, 0x82, 0x76, 0xed, 0xe0, 0x09, 0xa6, 0x75, 0x52,
	0x8f, 0xed, 0x01, 0xad, 0x89, 0x2a, 0x2d, 0xb0, 0x4a, 0xef, 0x55, 0x31, 0xc9, 0x84, 0x40, 0x49,
	0xfb, 0x56, 0xe9, 0x8c, 0x2f, 0x9a, 0xfd, 0x68, 0xba, 0x11, 0xcf, 0x61, 0xf7, 0x78, 0xca, 0xa5,
	0xc4, 0xd9, 0x49, 0xbd, 0x65, 0x7b, 0x99, 0xda, 0x70, 0xe8, 0xad, 0x30, 0x08, 0x32, 0x7b, 0x93,
	0xa5, 0x0b, 0x17, 0xdb, 0xeb, 0xfb, 0xdb, 0x08, 0x7f, 0xdf, 0x1a, 0xaf, 0x5a, 0x0f, 0xd6, 0xad,
	0x7f, 0x27, 0xb0, 0xb3, 0x6c, 0x78, 0x86, 0x5a, 0xf3, 0x6b, 0x5c, 0xd1, 0x22, 0x6b, 0x5a, 0x11,
	0xc0, 0x2d, 0x9a, 0xa9, 0x12, 0xe7, 0xfc, 0x16, 0xfd, 0x04, 0x2d, 0xc6, 0xfe, 0x3c, 0x99, 0x14,
	0xb8, 0x70, 0x43, 0xf4, 0x93, 0x25, 0xb0, 0x55, 0x39, 0x2f, 0xf8, 0x2d, 0x1a, 0x2c, 0xb4, 0x1f,
	0xa1, 0xc5, 0xac, 0x4e, 0xd8, 0x5f, 0x9b, 0x90, 0x8d, 0x60, 0x33, 0x55, 0xd2, 0xe0, 0xc2, 0x8c,
	0x36, 0xdc, 0xbb, 0x0a, 0xc6, 0x13, 0x18, 0xfa, 0x95, 0x55, 0xb3, 0xdb, 0xdc, 0x29, 0x97, 0x67,
	0xba, 0xfa, 0xdd, 0x2a, 0xf8, 0xef, 0x0f, 0xa0, 0xdd, 0xa3, 0xb7, 0xd2, 0xe3, 0x28, 0xfa, 0xf1,
	0x14, 0x91, 0xc7, 0xa7, 0x88, 0xfc, 0x7a, 0x8a, 0xc8, 0xc3, 0x73, 0xd4, 0x79, 0x7c, 0x8e, 0x3a,
	0x3f, 0x9f, 0xa3, 0xce, 0x17, 0x42, 0x1e, 0x08, 0x99, 0x6c, 0xb8, 0x0f, 0xf0, 0xf5, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x86, 0x14, 0xa7, 0x30, 0xb7, 0x04, 0x00, 0x00,
}

func (m *EncryptToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Token != 0 {
		i = encodeVarintLegacy(dAtA, i, uint64(m.Token))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EncryptKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TailPadding) > 0 {
		i -= len(m.TailPadding)
		copy(dAtA[i:], m.TailPadding)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.TailPadding)))
		i--
		dAtA[i] = 0x22
	}
	if m.Token != 0 {
		i = encodeVarintLegacy(dAtA, i, uint64(m.Token))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HeadPadding) > 0 {
		i -= len(m.HeadPadding)
		copy(dAtA[i:], m.HeadPadding)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.HeadPadding)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EncryptKeyString) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptKeyString) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptKeyString) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyString) > 0 {
		i -= len(m.KeyString)
		copy(dAtA[i:], m.KeyString)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.KeyString)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectServerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectServerReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectServerReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntityInfo) > 0 {
		i -= len(m.EntityInfo)
		copy(dAtA[i:], m.EntityInfo)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.EntityInfo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Auth) > 0 {
		i -= len(m.Auth)
		copy(dAtA[i:], m.Auth)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Auth)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClientInfo) > 0 {
		i -= len(m.ClientInfo)
		copy(dAtA[i:], m.ClientInfo)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.ClientInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintLegacy(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConnectServerResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectServerResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectServerResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintLegacy(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChannelEntityInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelEntityInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelEntityInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EntityId) > 0 {
		i -= len(m.EntityId)
		copy(dAtA[i:], m.EntityId)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.EntityId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Info) > 0 {
		i -= len(m.Info)
		copy(dAtA[i:], m.Info)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Info)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntityMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntityMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Parameters) > 0 {
		i -= len(m.Parameters)
		copy(dAtA[i:], m.Parameters)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Parameters)))
		i--
		dAtA[i] = 0x22
	}
	if m.Index != 0 {
		i = encodeVarintLegacy(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MethodName) > 0 {
		i -= len(m.MethodName)
		copy(dAtA[i:], m.MethodName)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.MethodName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EntityId) > 0 {
		i -= len(m.EntityId)
		copy(dAtA[i:], m.EntityId)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.EntityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChannelMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChanMsg) > 0 {
		i -= len(m.ChanMsg)
		copy(dAtA[i:], m.ChanMsg)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.ChanMsg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLegacy(dAtA []byte, offset int, v uint64) int {
	offset -= sovLegacy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EncryptToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != 0 {
		n += 1 + sovLegacy(uint64(m.Token))
	}
	return n
}

func (m *EncryptKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HeadPadding)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	if m.Token != 0 {
		n += 1 + sovLegacy(uint64(m.Token))
	}
	l = len(m.TailPadding)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *EncryptKeyString) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyString)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *ConnectServerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLegacy(uint64(m.Type))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.ClientInfo)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.Auth)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.EntityInfo)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *ConnectServerResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLegacy(uint64(m.Type))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *ChannelEntityInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.EntityId)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *EntityMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EntityId)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.MethodName)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovLegacy(uint64(m.Index))
	}
	l = len(m.Parameters)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *ChannelMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChanMsg)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func sovLegacy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLegacy(x uint64) (n int) {
	return sovLegacy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EncryptToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Token |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncryptKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadPadding", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadPadding = append(m.HeadPadding[:0], dAtA[iNdEx:postIndex]...)
			if m.HeadPadding == nil {
				m.HeadPadding = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Token |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TailPadding", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TailPadding = append(m.TailPadding[:0], dAtA[iNdEx:postIndex]...)
			if m.TailPadding == nil {
				m.TailPadding = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncryptKeyString) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptKeyString: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptKeyString: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyString", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyString = append(m.KeyString[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyString == nil {
				m.KeyString = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectServerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectServerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectServerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ConnectServerReq_ReqType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = append(m.DeviceId[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceId == nil {
				m.DeviceId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientInfo = append(m.ClientInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientInfo == nil {
				m.ClientInfo = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auth = append(m.Auth[:0], dAtA[iNdEx:postIndex]...)
			if m.Auth == nil {
				m.Auth = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityInfo = append(m.EntityInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.EntityInfo == nil {
				m.EntityInfo = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectServerResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectServerResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectServerResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ConnectServerResp_RespType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = append(m.SessionId[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionId == nil {
				m.SessionId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelEntityInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelEntityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelEntityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = append(m.Type[:0], dAtA[iNdEx:postIndex]...)
			if m.Type == nil {
				m.Type = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info[:0], dAtA[iNdEx:postIndex]...)
			if m.Info == nil {
				m.Info = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityId = append(m.EntityId[:0], dAtA[iNdEx:postIndex]...)
			if m.EntityId == nil {
				m.EntityId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = append(m.SessionId[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionId == nil {
				m.SessionId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntityMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityId = append(m.EntityId[:0], dAtA[iNdEx:postIndex]...)
			if m.EntityId == nil {
				m.EntityId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = append(m.MethodName[:0], dAtA[iNdEx:postIndex]...)
			if m.MethodName == nil {
				m.MethodName = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters[:0], dAtA[iNdEx:postIndex]...)
			if m.Parameters == nil {
				m.Parameters = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = append(m.SessionId[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionId == nil {
				m.SessionId = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context[:0], dAtA[iNdEx:postIndex]...)
			if m.Context == nil {
				m.Context = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChanMsg = append(m.ChanMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.ChanMsg == nil {
				m.ChanMsg = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = append(m.SessionId[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionId == nil {
				m.SessionId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context[:0], dAtA[iNdEx:postIndex]...)
			if m.Context == nil {
				m.Context = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLegacy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLegacy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLegacy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLegacy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLegacy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLegacy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLegacy = fmt.Errorf("proto: unexpected end of group")
)
