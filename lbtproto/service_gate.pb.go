// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service_gate.proto

package lbtproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BindClientInfo struct {
	Caddr string `protobuf:"bytes,1,opt,name=caddr,proto3" json:"caddr,omitempty"`
	Saddr string `protobuf:"bytes,2,opt,name=saddr,proto3" json:"saddr,omitempty"`
}

func (m *BindClientInfo) Reset()         { *m = BindClientInfo{} }
func (m *BindClientInfo) String() string { return proto.CompactTextString(m) }
func (*BindClientInfo) ProtoMessage()    {}
func (*BindClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9168d185c861b5, []int{0}
}
func (m *BindClientInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BindClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BindClientInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BindClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BindClientInfo.Merge(m, src)
}
func (m *BindClientInfo) XXX_Size() int {
	return m.Size()
}
func (m *BindClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BindClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BindClientInfo proto.InternalMessageInfo

func (m *BindClientInfo) GetCaddr() string {
	if m != nil {
		return m.Caddr
	}
	return ""
}

func (m *BindClientInfo) GetSaddr() string {
	if m != nil {
		return m.Saddr
	}
	return ""
}

func init() {
	proto.RegisterType((*BindClientInfo)(nil), "lbtproto.BindClientInfo")
}

func init() { proto.RegisterFile("service_gate.proto", fileDescriptor_ff9168d185c861b5) }

var fileDescriptor_ff9168d185c861b5 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x90, 0xc1, 0x4e, 0x2a, 0x31,
	0x18, 0x85, 0x29, 0xc9, 0xbd, 0xe1, 0xfe, 0x17, 0xb8, 0xdc, 0x8a, 0x86, 0xb0, 0x68, 0x8c, 0x2b,
	0x57, 0x24, 0x62, 0x0c, 0x21, 0xea, 0x06, 0x35, 0x86, 0x85, 0x1b, 0x4c, 0xdc, 0x4e, 0x86, 0xb6,
	0x8e, 0x4d, 0xa0, 0xc5, 0xb6, 0x68, 0xd8, 0xf9, 0x08, 0x3c, 0x85, 0xcf, 0xe2, 0x92, 0xa5, 0x4b,
	0x02, 0x2f, 0x62, 0x68, 0x19, 0x26, 0xcc, 0x6c, 0xd4, 0xb8, 0x9b, 0x9e, 0xff, 0x9c, 0x9c, 0x33,
	0x1f, 0x60, 0xc3, 0xf5, 0x93, 0xa0, 0x3c, 0x88, 0x42, 0xcb, 0x1b, 0x23, 0xad, 0xac, 0xc2, 0x85,
	0x41, 0xdf, 0xba, 0xaf, 0x7a, 0x91, 0xaa, 0xe1, 0x50, 0x49, 0xaf, 0x1f, 0x9c, 0x41, 0xb9, 0x23,
	0x24, 0xbb, 0x18, 0x08, 0x2e, 0x6d, 0x57, 0xde, 0x2b, 0x5c, 0x85, 0x5f, 0x34, 0x64, 0x4c, 0xd7,
	0xd0, 0x3e, 0x3a, 0xfc, 0xd3, 0xf3, 0x8f, 0x95, 0x6a, 0x9c, 0x9a, 0xf7, 0xaa, 0x7b, 0x34, 0xe7,
	0x79, 0x28, 0x76, 0x6f, 0x7d, 0xdb, 0x75, 0x68, 0x39, 0x6e, 0x43, 0x45, 0xf3, 0x48, 0x18, 0xcb,
	0x75, 0xb0, 0x5e, 0x81, 0x77, 0x1b, 0x71, 0x77, 0x63, 0x6d, 0x5d, 0xf5, 0xd4, 0xcb, 0x89, 0x7c,
	0xa7, 0x04, 0xc3, 0x2d, 0xf8, 0xdb, 0x17, 0x92, 0x05, 0xd4, 0x4d, 0xc1, 0xb5, 0xe4, 0xbc, 0x3d,
	0x30, 0x13, 0x6c, 0x43, 0x69, 0x2c, 0xbf, 0x17, 0x6d, 0x41, 0x29, 0x66, 0xa5, 0xf9, 0x68, 0x30,
	0xc1, 0x7b, 0x99, 0xad, 0xbd, 0x95, 0x9e, 0x09, 0x9e, 0x40, 0x89, 0x6a, 0x1e, 0x5a, 0x1e, 0x70,
	0x69, 0x85, 0x9d, 0xe0, 0x6a, 0x62, 0xb8, 0x72, 0xca, 0x65, 0x68, 0xc3, 0x4c, 0xec, 0x08, 0xc0,
	0xfb, 0x83, 0xa1, 0x89, 0xf0, 0x4e, 0x3a, 0x73, 0x63, 0xa2, 0x74, 0xa4, 0xf9, 0x9a, 0x87, 0x42,
	0x8c, 0x18, 0xb7, 0xa0, 0xbc, 0xc1, 0xeb, 0x07, 0x7f, 0x12, 0xee, 0x39, 0xfc, 0xf7, 0x70, 0x02,
	0x26, 0x0c, 0x55, 0x52, 0x72, 0xfa, 0x15, 0x4e, 0xa7, 0xf0, 0x2f, 0xe1, 0xf4, 0x38, 0xe6, 0x66,
	0x2b, 0xbc, 0x21, 0xe5, 0x2e, 0x3f, 0xf0, 0xd3, 0xb8, 0x09, 0x95, 0xb8, 0xcf, 0x3c, 0x8c, 0x2d,
	0x53, 0xcf, 0x12, 0xa7, 0x3c, 0xe9, 0x4c, 0x87, 0xbc, 0x2d, 0x08, 0x9a, 0x2d, 0x08, 0x9a, 0x2f,
	0x08, 0x9a, 0x2e, 0x49, 0x6e, 0xb6, 0x24, 0xb9, 0xf7, 0x25, 0xc9, 0xbd, 0x20, 0x34, 0x45, 0xa8,
	0xff, 0xdb, 0x79, 0x8f, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x10, 0x3b, 0x03, 0xbb, 0x1e, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IServiceGateClient is the client API for IServiceGate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IServiceGateClient interface {
	RegisterService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*Void, error)
	BindClient(ctx context.Context, in *BindClientInfo, opts ...grpc.CallOption) (*Void, error)
	UnbindClient(ctx context.Context, in *BindClientInfo, opts ...grpc.CallOption) (*Void, error)
	ServiceReply(ctx context.Context, in *ServiceReply, opts ...grpc.CallOption) (*Void, error)
	CreateEntity(ctx context.Context, in *EntityData, opts ...grpc.CallOption) (*Void, error)
	EntityMsg(ctx context.Context, in *EntityMsg, opts ...grpc.CallOption) (*Void, error)
}

type iServiceGateClient struct {
	cc *grpc.ClientConn
}

func NewIServiceGateClient(cc *grpc.ClientConn) IServiceGateClient {
	return &iServiceGateClient{cc}
}

func (c *iServiceGateClient) RegisterService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IServiceGate/register_service", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iServiceGateClient) BindClient(ctx context.Context, in *BindClientInfo, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IServiceGate/bind_client", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iServiceGateClient) UnbindClient(ctx context.Context, in *BindClientInfo, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IServiceGate/unbind_client", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iServiceGateClient) ServiceReply(ctx context.Context, in *ServiceReply, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IServiceGate/service_reply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iServiceGateClient) CreateEntity(ctx context.Context, in *EntityData, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IServiceGate/create_entity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iServiceGateClient) EntityMsg(ctx context.Context, in *EntityMsg, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IServiceGate/entity_msg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IServiceGateServer is the server API for IServiceGate service.
type IServiceGateServer interface {
	RegisterService(context.Context, *ServiceInfo) (*Void, error)
	BindClient(context.Context, *BindClientInfo) (*Void, error)
	UnbindClient(context.Context, *BindClientInfo) (*Void, error)
	ServiceReply(context.Context, *ServiceReply) (*Void, error)
	CreateEntity(context.Context, *EntityData) (*Void, error)
	EntityMsg(context.Context, *EntityMsg) (*Void, error)
}

// UnimplementedIServiceGateServer can be embedded to have forward compatible implementations.
type UnimplementedIServiceGateServer struct {
}

func (*UnimplementedIServiceGateServer) RegisterService(ctx context.Context, req *ServiceInfo) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (*UnimplementedIServiceGateServer) BindClient(ctx context.Context, req *BindClientInfo) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindClient not implemented")
}
func (*UnimplementedIServiceGateServer) UnbindClient(ctx context.Context, req *BindClientInfo) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindClient not implemented")
}
func (*UnimplementedIServiceGateServer) ServiceReply(ctx context.Context, req *ServiceReply) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceReply not implemented")
}
func (*UnimplementedIServiceGateServer) CreateEntity(ctx context.Context, req *EntityData) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (*UnimplementedIServiceGateServer) EntityMsg(ctx context.Context, req *EntityMsg) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityMsg not implemented")
}

func RegisterIServiceGateServer(s *grpc.Server, srv IServiceGateServer) {
	s.RegisterService(&_IServiceGate_serviceDesc, srv)
}

func _IServiceGate_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceGateServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IServiceGate/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceGateServer).RegisterService(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IServiceGate_BindClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceGateServer).BindClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IServiceGate/BindClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceGateServer).BindClient(ctx, req.(*BindClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IServiceGate_UnbindClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceGateServer).UnbindClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IServiceGate/UnbindClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceGateServer).UnbindClient(ctx, req.(*BindClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IServiceGate_ServiceReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceGateServer).ServiceReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IServiceGate/ServiceReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceGateServer).ServiceReply(ctx, req.(*ServiceReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _IServiceGate_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceGateServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IServiceGate/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceGateServer).CreateEntity(ctx, req.(*EntityData))
	}
	return interceptor(ctx, in, info, handler)
}

func _IServiceGate_EntityMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceGateServer).EntityMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IServiceGate/EntityMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceGateServer).EntityMsg(ctx, req.(*EntityMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _IServiceGate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lbtproto.IServiceGate",
	HandlerType: (*IServiceGateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register_service",
			Handler:    _IServiceGate_RegisterService_Handler,
		},
		{
			MethodName: "bind_client",
			Handler:    _IServiceGate_BindClient_Handler,
		},
		{
			MethodName: "unbind_client",
			Handler:    _IServiceGate_UnbindClient_Handler,
		},
		{
			MethodName: "service_reply",
			Handler:    _IServiceGate_ServiceReply_Handler,
		},
		{
			MethodName: "create_entity",
			Handler:    _IServiceGate_CreateEntity_Handler,
		},
		{
			MethodName: "entity_msg",
			Handler:    _IServiceGate_EntityMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_gate.proto",
}

// IServiceClient is the client API for IService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IServiceClient interface {
	RegisterReply(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*Void, error)
	ClientDisconnect(ctx context.Context, in *BindClientInfo, opts ...grpc.CallOption) (*Void, error)
	ServiceRequest(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Void, error)
	EntityMsg(ctx context.Context, in *EntityMsg, opts ...grpc.CallOption) (*Void, error)
	ServiceShutdown(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
}

type iServiceClient struct {
	cc *grpc.ClientConn
}

func NewIServiceClient(cc *grpc.ClientConn) IServiceClient {
	return &iServiceClient{cc}
}

func (c *iServiceClient) RegisterReply(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IService/register_reply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iServiceClient) ClientDisconnect(ctx context.Context, in *BindClientInfo, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IService/client_disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iServiceClient) ServiceRequest(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IService/service_request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iServiceClient) EntityMsg(ctx context.Context, in *EntityMsg, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IService/entity_msg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iServiceClient) ServiceShutdown(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IService/service_shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IServiceServer is the server API for IService service.
type IServiceServer interface {
	RegisterReply(context.Context, *ServiceInfo) (*Void, error)
	ClientDisconnect(context.Context, *BindClientInfo) (*Void, error)
	ServiceRequest(context.Context, *ServiceRequest) (*Void, error)
	EntityMsg(context.Context, *EntityMsg) (*Void, error)
	ServiceShutdown(context.Context, *Void) (*Void, error)
}

// UnimplementedIServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIServiceServer struct {
}

func (*UnimplementedIServiceServer) RegisterReply(ctx context.Context, req *ServiceInfo) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterReply not implemented")
}
func (*UnimplementedIServiceServer) ClientDisconnect(ctx context.Context, req *BindClientInfo) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientDisconnect not implemented")
}
func (*UnimplementedIServiceServer) ServiceRequest(ctx context.Context, req *ServiceRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceRequest not implemented")
}
func (*UnimplementedIServiceServer) EntityMsg(ctx context.Context, req *EntityMsg) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityMsg not implemented")
}
func (*UnimplementedIServiceServer) ServiceShutdown(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceShutdown not implemented")
}

func RegisterIServiceServer(s *grpc.Server, srv IServiceServer) {
	s.RegisterService(&_IService_serviceDesc, srv)
}

func _IService_RegisterReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceServer).RegisterReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IService/RegisterReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceServer).RegisterReply(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IService_ClientDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceServer).ClientDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IService/ClientDisconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceServer).ClientDisconnect(ctx, req.(*BindClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IService_ServiceRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceServer).ServiceRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IService/ServiceRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceServer).ServiceRequest(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IService_EntityMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceServer).EntityMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IService/EntityMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceServer).EntityMsg(ctx, req.(*EntityMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _IService_ServiceShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceServer).ServiceShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IService/ServiceShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceServer).ServiceShutdown(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _IService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lbtproto.IService",
	HandlerType: (*IServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register_reply",
			Handler:    _IService_RegisterReply_Handler,
		},
		{
			MethodName: "client_disconnect",
			Handler:    _IService_ClientDisconnect_Handler,
		},
		{
			MethodName: "service_request",
			Handler:    _IService_ServiceRequest_Handler,
		},
		{
			MethodName: "entity_msg",
			Handler:    _IService_EntityMsg_Handler,
		},
		{
			MethodName: "service_shutdown",
			Handler:    _IService_ServiceShutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_gate.proto",
}

func (m *BindClientInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindClientInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BindClientInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Saddr) > 0 {
		i -= len(m.Saddr)
		copy(dAtA[i:], m.Saddr)
		i = encodeVarintServiceGate(dAtA, i, uint64(len(m.Saddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Caddr) > 0 {
		i -= len(m.Caddr)
		copy(dAtA[i:], m.Caddr)
		i = encodeVarintServiceGate(dAtA, i, uint64(len(m.Caddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintServiceGate(dAtA []byte, offset int, v uint64) int {
	offset -= sovServiceGate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BindClientInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Caddr)
	if l > 0 {
		n += 1 + l + sovServiceGate(uint64(l))
	}
	l = len(m.Saddr)
	if l > 0 {
		n += 1 + l + sovServiceGate(uint64(l))
	}
	return n
}

func sovServiceGate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServiceGate(x uint64) (n int) {
	return sovServiceGate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BindClientInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindClientInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindClientInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Saddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceGate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Saddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServiceGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServiceGate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServiceGate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceGate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceGate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServiceGate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServiceGate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServiceGate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServiceGate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServiceGate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServiceGate = fmt.Errorf("proto: unexpected end of group")
)
