// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service_gate.proto

package lbtproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service_gate.proto", fileDescriptor_ff9168d185c861b5) }

var fileDescriptor_ff9168d185c861b5 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x8d, 0x4f, 0x4f, 0x2c, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0xc8, 0x49, 0x2a, 0x01, 0xb3, 0xa4, 0x78, 0x92, 0xf3, 0x73, 0x73, 0xf3, 0xf3, 0x20, 0xe2, 0x46,
	0x6f, 0x18, 0xb9, 0x78, 0x3c, 0x83, 0x21, 0xea, 0xdd, 0x13, 0x4b, 0x52, 0x85, 0x2c, 0xb9, 0x04,
	0x8a, 0x52, 0xd3, 0x33, 0x8b, 0x4b, 0x52, 0x8b, 0xe2, 0xa1, 0xe6, 0x08, 0x89, 0xea, 0xc1, 0x74,
	0xeb, 0x41, 0x95, 0x7a, 0xe6, 0xa5, 0xe5, 0x4b, 0xf1, 0x21, 0x84, 0xc3, 0xf2, 0x33, 0x53, 0x84,
	0xcc, 0xb9, 0x78, 0x61, 0x36, 0x17, 0xa5, 0x16, 0xe4, 0x54, 0x0a, 0x89, 0x61, 0xe8, 0x0b, 0x02,
	0x89, 0x63, 0x68, 0x34, 0xe5, 0xe2, 0x4d, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x8d, 0x4f, 0xcd, 0x2b,
	0xc9, 0x2c, 0xa9, 0x14, 0x12, 0x41, 0x28, 0x70, 0x05, 0x8b, 0xb8, 0x24, 0x96, 0x24, 0x62, 0x68,
	0x33, 0xe4, 0xe2, 0x82, 0xa8, 0x8f, 0xcf, 0x2d, 0x4e, 0x17, 0x12, 0x46, 0xd7, 0xe3, 0x5b, 0x9c,
	0x8e, 0xae, 0xc5, 0x68, 0x33, 0x23, 0x17, 0x07, 0xcc, 0xbb, 0x42, 0xe6, 0x5c, 0x7c, 0x70, 0xaf,
	0x42, 0x1c, 0x4c, 0xa4, 0x47, 0xad, 0xb9, 0xf8, 0x11, 0x1e, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11,
	0x92, 0xc0, 0xe2, 0x55, 0xb0, 0x0c, 0x15, 0x5c, 0xed, 0x24, 0x77, 0xe2, 0x91, 0x1c, 0xe3, 0x85,
	0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3,
	0x8d, 0xc7, 0x72, 0x0c, 0x0d, 0x8c, 0x8c, 0x13, 0x18, 0x19, 0x93, 0xd8, 0xc0, 0x6a, 0x8d, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x29, 0xc2, 0xec, 0xee, 0xf9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IServiceGateClient is the client API for IServiceGate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IServiceGateClient interface {
	RegisterService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*Void, error)
	ServiceReply(ctx context.Context, in *ServiceReply, opts ...grpc.CallOption) (*Void, error)
	CreateEntity(ctx context.Context, in *EntityData, opts ...grpc.CallOption) (*Void, error)
	EntityMsg(ctx context.Context, in *EntityMsg, opts ...grpc.CallOption) (*Void, error)
}

type iServiceGateClient struct {
	cc *grpc.ClientConn
}

func NewIServiceGateClient(cc *grpc.ClientConn) IServiceGateClient {
	return &iServiceGateClient{cc}
}

func (c *iServiceGateClient) RegisterService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IServiceGate/register_service", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iServiceGateClient) ServiceReply(ctx context.Context, in *ServiceReply, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IServiceGate/service_reply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iServiceGateClient) CreateEntity(ctx context.Context, in *EntityData, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IServiceGate/create_entity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iServiceGateClient) EntityMsg(ctx context.Context, in *EntityMsg, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IServiceGate/entity_msg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IServiceGateServer is the server API for IServiceGate service.
type IServiceGateServer interface {
	RegisterService(context.Context, *ServiceInfo) (*Void, error)
	ServiceReply(context.Context, *ServiceReply) (*Void, error)
	CreateEntity(context.Context, *EntityData) (*Void, error)
	EntityMsg(context.Context, *EntityMsg) (*Void, error)
}

// UnimplementedIServiceGateServer can be embedded to have forward compatible implementations.
type UnimplementedIServiceGateServer struct {
}

func (*UnimplementedIServiceGateServer) RegisterService(ctx context.Context, req *ServiceInfo) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (*UnimplementedIServiceGateServer) ServiceReply(ctx context.Context, req *ServiceReply) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceReply not implemented")
}
func (*UnimplementedIServiceGateServer) CreateEntity(ctx context.Context, req *EntityData) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (*UnimplementedIServiceGateServer) EntityMsg(ctx context.Context, req *EntityMsg) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityMsg not implemented")
}

func RegisterIServiceGateServer(s *grpc.Server, srv IServiceGateServer) {
	s.RegisterService(&_IServiceGate_serviceDesc, srv)
}

func _IServiceGate_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceGateServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IServiceGate/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceGateServer).RegisterService(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IServiceGate_ServiceReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceGateServer).ServiceReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IServiceGate/ServiceReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceGateServer).ServiceReply(ctx, req.(*ServiceReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _IServiceGate_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceGateServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IServiceGate/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceGateServer).CreateEntity(ctx, req.(*EntityData))
	}
	return interceptor(ctx, in, info, handler)
}

func _IServiceGate_EntityMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceGateServer).EntityMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IServiceGate/EntityMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceGateServer).EntityMsg(ctx, req.(*EntityMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _IServiceGate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lbtproto.IServiceGate",
	HandlerType: (*IServiceGateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register_service",
			Handler:    _IServiceGate_RegisterService_Handler,
		},
		{
			MethodName: "service_reply",
			Handler:    _IServiceGate_ServiceReply_Handler,
		},
		{
			MethodName: "create_entity",
			Handler:    _IServiceGate_CreateEntity_Handler,
		},
		{
			MethodName: "entity_msg",
			Handler:    _IServiceGate_EntityMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_gate.proto",
}

// IServiceClient is the client API for IService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IServiceClient interface {
	RegisterReply(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*Void, error)
	ServiceRequest(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Void, error)
	EntityMsg(ctx context.Context, in *EntityMsg, opts ...grpc.CallOption) (*Void, error)
}

type iServiceClient struct {
	cc *grpc.ClientConn
}

func NewIServiceClient(cc *grpc.ClientConn) IServiceClient {
	return &iServiceClient{cc}
}

func (c *iServiceClient) RegisterReply(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IService/register_reply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iServiceClient) ServiceRequest(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IService/service_request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iServiceClient) EntityMsg(ctx context.Context, in *EntityMsg, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/lbtproto.IService/entity_msg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IServiceServer is the server API for IService service.
type IServiceServer interface {
	RegisterReply(context.Context, *ServiceInfo) (*Void, error)
	ServiceRequest(context.Context, *ServiceRequest) (*Void, error)
	EntityMsg(context.Context, *EntityMsg) (*Void, error)
}

// UnimplementedIServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIServiceServer struct {
}

func (*UnimplementedIServiceServer) RegisterReply(ctx context.Context, req *ServiceInfo) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterReply not implemented")
}
func (*UnimplementedIServiceServer) ServiceRequest(ctx context.Context, req *ServiceRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceRequest not implemented")
}
func (*UnimplementedIServiceServer) EntityMsg(ctx context.Context, req *EntityMsg) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntityMsg not implemented")
}

func RegisterIServiceServer(s *grpc.Server, srv IServiceServer) {
	s.RegisterService(&_IService_serviceDesc, srv)
}

func _IService_RegisterReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceServer).RegisterReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IService/RegisterReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceServer).RegisterReply(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _IService_ServiceRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceServer).ServiceRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IService/ServiceRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceServer).ServiceRequest(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IService_EntityMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IServiceServer).EntityMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbtproto.IService/EntityMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IServiceServer).EntityMsg(ctx, req.(*EntityMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _IService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lbtproto.IService",
	HandlerType: (*IServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register_reply",
			Handler:    _IService_RegisterReply_Handler,
		},
		{
			MethodName: "service_request",
			Handler:    _IService_ServiceRequest_Handler,
		},
		{
			MethodName: "entity_msg",
			Handler:    _IService_EntityMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_gate.proto",
}
